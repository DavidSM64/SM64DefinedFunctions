/***************************************************************************
This document contains many different function defines from Super Mario 64
for use in custom ASM code.

You can include this file into a CajeASM file and call each function using 
'JAL @FunctionName'

You can download the latest version of CajeASM here:
http://origami64.net/showthread.php?tid=30

Latest update: March 12th, 2016
Contributors: Davideesk
****************************************************************************/

/*
SegmentedToVirtual (0x80277F50 / 0x32F50)

Converts a segment address to a true RAM address.

Arguments:
A0 = Segment address
Returns:
V0 = RAM address
*/
[SegmentedToVirtual]: 0x00277F50

/*
DmaCopy (0x80278504 / 0x33504)

Copies data from ROM to RAM.

Arguments:
A0 = RAM address to copy to
A1 = ROM start address
A2 = ROM end address
*/
[DmaCopy]: 0x00278504

/*
SpawnObj (0x8029EDCC / 0x59DCC)

Spawns an object at another object's position.

Arguments:
A0 = Object pointer
A1 = Model ID
A2 = Behavior segment address
Returns:
V0 = pointer to newly spawned object
*/
[SpawnObj]: 0x0029EDCC

/*
ScaleXYZ (0x8029F3D0 / 0x5A3D0)

Scales an object.

Arguments:
A0 = pointer to object
A1 = Scale X factor (float)
A2 = Scale Y factor (float)
A3 = Scale Z factor (float)
*/
[ScaleXYZ]: 0x0029F3D0

/*
ScaleObject (0x8029F430 / 0x5A430)

Scales an object uniformly.

Arguments:
F12 = Scale factor
*/
[ScaleObject]: 0x0029F430

/*
HideObject (0x8029F620 / 0x5A620)

Hides current object (0x80361160) by ORing 0x01 at offset 0x02.
*/
[HideObject]: 0x0029F620

/*
UnHideObject (0x8029F6BC / 0x5A6BC)

Unhides the current object (0x80361160) by ORing 0x10 at offset 0x02.
*/
[UnHideObject]: 0x0029F6BC

/*
SetObjBehavior (0x802A14C4 / 0x5C4C4)

Set the behavior for an object.

Arguments:
A0 = Pointer to object
A1 = Behavior segmented pointer
*/
[SetObjBehavior]: 0x002A14C4

/*
CheckObjBehavior (0x802A14FC / 0x5C4FC)

Check to see if current object (0x80361160) has a certain behavior.

Arguments:
A0 = Behavior segmented pointer
Returns:
if true then V0 = 1, else V0 = 0
*/
[CheckObjBehavior]: 0x002A14FC

/*
CheckObjBehavior2 (0x802A1554 / 0x5C554)

Check to see if an object has a certain behavior.

Arguments:
A0 = Pointer to object
A1 = Behavior segmented pointer
Returns:
if true then V0 = 1, else V0 = 0
*/
[CheckObjBehavior2]: 0x002A1554

/*
IsMarioGroundPounding (0x802A3754 / 0x5E754)

Detects if Mario is ground-pounding the current object (0x80361160).

Returns:
if true then V0 = 1, else V0 = 0
*/
[IsMarioGroundPounding]: 0x002A3754

/*
IsMarioStepping (0x802A3CFC / 0x5ECFC)

Detects if Mario is on top of the current object (0x80361160).

Returns:
if true then V0 = 1, else V0 = 0
*/
[IsMarioStepping]: 0x002A3CFC 


/*
ShakeScreen (0x802A3CFC / 0x600FC)

Shakes the screen.

Arguments:
A0 = Intensity? (1 to 4)
*/
[ShakeScreen]: 0x002A50FC

/*
PrintInt (0x802D62D8 / 0x912D8)

Prints a string and a value to the screen. Similar to printf.

Arguments:
A0 = X position
A1 = Y position
A2 = pointer to text
A3 = value

Example:
A0 = 0x64, A1 = 0x64, A2 = "Super Mario %d!", A3 = 0x40 
will print out "Super Mario 64!" on the screen at the position (100,100)
*/
[PrintInt]: 0x002D62D8

/*
PrintXY (0x802D66C0 / 0x916C0)

Prints a string and a value to the screen. Similar to printf.

Arguments:
A0 = X position
A1 = Y position
A2 = pointer to text

Example:
A0 = 0x64, A1 = 0x64, A2 = "Hello World!" 
will print out "Hello World!" on the screen at the position (100,100)
*/
[PrintXY]: 0x002D66C0

/*
ExplodeObject (0x802E6AF8 / 0xA1AF8)

Explodes the current object (0x80361160) like a bob-omb and spawns a coin.
*/
[ExplodeObject]: 0x002E6AF8

/*
CreateStar (0x802F2B88 / 0xADB88)

Creates a star that travels to a specific XYZ position.

Arguments:
F12 = X position (float)
F14 = Y position (float)
A2 = Z position (float)

Returns:
V0 = Pointer to star object
*/
[CreateStar]: 0x002F2B88

/*
cosf (0x80325310 / 0xE0310)

Computes the cosine of an angle.

Arguments:
F12 = Input angle (in radians)
Returns:
F0 = resulting value
*/
[cosf]: 0x00325310 

/*
sinf (0x80325480 / 0xE0480)

Computes the sine of an angle.

Arguments:
F12 = Input angle (in radians)
Returns:
F0 = resulting value
*/
[sinf]: 0x00325480 

/*
memcpy (0x803273F0 / 0xE23F0)

Copies bytes in the RAM from one location to another.

Arguments:
A0 = Pointer to RAM destination to copy to
A1 = Pointer to RAM source to copy from
A2 = Number of bytes to copy
Returns:
V0 = Pointer to RAM desitination
*/
[memcpy]: 0x003273F0

/*
strlen (0x8032741C / 0xE241C)

Gets the length of an ascii string.

Arguments:
A0 = pointer to string
Returns:
V0 = length of string

Example: 
If A0 pointed to "Hello World!", then V0 would return 12.
*/
[strlen]: 0x0032741C

/*
strchr (0x80327444 / 0xE2444)

returns a pointer to the first instance of a character in a string.

Arguments:
A0 = pointer to string
A1 = ASCII character to be located
Returns:
V0 = pointer to the first occurrence
If no matching character was found, then V0 will return 0
*/
[strchr]: 0x00327444 